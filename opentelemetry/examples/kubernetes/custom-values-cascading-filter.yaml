sumologic:
  accessId: <ENTER_YOUR_SUMOLOGIC_ACCESS_ID>
  accessKey: <ENTER_YOUR_SUMOLOGIC_ACCESS_KEY>
  clusterName: <ENTER_YOUR_CLUSTER_NAME>
  traces:
    enabled: true
## Following enables OpenTelemetry Agent which runs on each node as a DaemonSet
otelagent:
  enabled:
    true
## Following configures OpenTelemetry Collector (gateway)
## Note that if cascading_filter is used, deployment must include only a single instance
otelcol:
  metrics:
    ## This enables exposing OpenTelemetry Collector metrics. Note that they will consume your DPM
    ## hence by default they are disabled
    enabled:
      true
  config:
    processors:
      ## Following enables a smart cascading filtering rules with preset limits.
      cascading_filter:
        ## (default = 30s): Wait time since the first span of a trace before making
        ## a filtering decision
        decision_wait: 30s
        ## (default = 50000): Number of traces kept in memory
        num_traces: 50000
        ## (default = 0): Expected number of new traces (helps in allocating data structures)
        expected_new_traces_per_sec: 100
        ## (default = 0): defines maximum number of spans per second
        spans_per_second: 1600
        ## (default = 0.2): Ratio of spans that are always probabilistically filtered
        ## (hence might be used for metrics calculation).
        probabilistic_filtering_ratio: 0.2
        ## (no default): Policies used to make a sampling decision
        policies:
          - name: sampling-priority,
            ## string_attribute: allows to specify conditions that need to be met
            string_attribute: {
              key: sampling.priority, values: [ "1" ]
            },
            ## Spans_per_second: max number of emitted spans per second by this policy.
            spans_per_second: 500
          - name: everything-else
            ## This selects all traces, up the to the global limit
            spans_per_second: -1
          ## Following are some examples of other rules that could be used
          # - name: extended-duration
          #  ## Spans_per_second: max number of emitted spans per second by this policy.
          #  spans_per_second: 500
          #   properties:
          #     ## Selects the span if the duration is greater or equal the given
          #     ## value (use s or ms as the suffix to indicate unit).
          #     min_duration: 5s
          # - name: "status_code_condition",
          #   ## Spans_per_second: max number of emitted spans per second by this policy.
          #   spans_per_second: 500,
          #   ## numeric_attribute: provides a list of conditions that need to be met
          #   numeric_attribute: {
          #     key: "http.status_code", min_value: 400, max_value: 999
          #   }
          # - name: everything-that-is-not-healthcheck
          #   ## This selects all traces where there is NO span starting with `health` operation name
          #   ## If employed, "everything-else" rule must be replaced with it
          #   properties:
          #     name_pattern: "^(healthcheck|otherhealthcheck).*"
          #   invert_match: true
          #   spans_per_second: -1
    service:
      pipelines:
        traces:
          ## This is required to enable cascading_filter
          processors: [memory_limiter, k8s_tagger, source, resource, cascading_filter, batch]
